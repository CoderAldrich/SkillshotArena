--=======================================================================================
-- Generated by TypescriptToLua transpiler https://github.com/Perryvw/TypescriptToLua 
-- Date: Tue Mar 13 2018
--=======================================================================================
require("typescript_lualib")
require("abilities/base_ability")
homing_missile = base_ability.new()
homing_missile.__index = homing_missile
homing_missile.__base = base_ability
function homing_missile.new(construct, ...)
    local instance = setmetatable({}, homing_missile)
    if construct and homing_missile.constructor then homing_missile.constructor(instance, ...) end
    return instance
end
function homing_missile.GetProjectileParticleName(self)
    return ""
end
function homing_missile.OnAbilityPhaseStart(self)
    local caster = self:GetCaster()

    self.unit=CreateUnitByName("npc_dota_unit_homing_missile",caster:GetAbsOrigin(),true,caster,caster:GetPlayerOwner(),caster:GetTeamNumber())
    return true
end
function homing_missile.OnAbilityPhaseInterrupted(self)
    UTIL_Remove(self.unit)
    self.unit=nil
end
function homing_missile.OnSpellStart(self)
    local ability = self

    local caster = self:GetCaster()

    local target = self:GetCursorTarget()

    local unit = self.unit

    local projectileTable = {hCaster=caster,hTarget=target,flRadius=self:GetSpecialValueFor("radius"),flSpeed=self:GetProjectileSpeed(),flTurnRate=0.75,flAcceleration=0.996,sEffectName=self:GetProjectileParticleName(),hUnit=unit,UnitBehavior=PROJECTILES_DESTROY,ProjectileBehavior=PROJECTILES_NOTHING,TreeBehavior=PROJECTILES_BOUNCE,WallBehavior=PROJECTILES_BOUNCE,ItemBehavior=PROJECTILES_IGNORE,OnProjectileHit=function(myProjectile,otherProjectile)
        if (TS_indexOf(myProjectile.hitByProjectile, otherProjectile)==-1) and (myProjectile.caster:GetTeamNumber()==otherProjectile.caster:GetTeamNumber()) then
            TS_push(myProjectile.hitByProjectile, otherProjectile)
            local unit = myProjectile.unit

            unit:SetHealth(unit:GetHealth()-1)
            if unit:GetHealth()<=0 then
                Physics2D:DestroyProjectile(myProjectile)
            end
        end
    end
,OnProjectileThink=function(hProjectile,location)
        if (hProjectile.speed<5) and not hProjectile.IsTimeLocked then
            Physics2D:DestroyProjectile(hProjectile)
            return
        end
        local dir = location-hProjectile.unit:GetAbsOrigin()

        dir=dir:Normalized()
        local unit = hProjectile.unit

    end
,UnitTest=function(hProjectile,hTarget,hCaster)
        return self:UnitTest(hProjectile,hTarget,hCaster)
    end
,OnUnitHit=function(hProjectile,hTarget,hCaster)
    end
,OnFinish=function(projectile)
        ParticleManager:DestroyParticle(projectile.projParticle,false)
        ParticleManager:ReleaseParticleIndex(projectile.projParticle)
        local particle = ParticleManager:CreateParticle("particles/units/heroes/hero_gyrocopter/gyro_guided_missile_death.vpcf",PATTACH_ABSORIGIN,caster)

        ParticleManager:SetParticleControl(particle,0,projectile.location)
        ParticleManager:ReleaseParticleIndex(particle)
        local units = FindUnitsInRadius(projectile.caster:GetTeamNumber(),projectile.location,nil,150,DOTA_UNIT_TARGET_TEAM_ENEMY,DOTA_UNIT_TARGET_HERO,DOTA_UNIT_TARGET_FLAG_NONE,FIND_ANY_ORDER,false)

        TS_forEach(units, function(hTarget)
            ApplyDamage({ability=self,attacker=projectile.caster,victim=hTarget,damage=self:GetAbilityDamage(),damage_type=DAMAGE_TYPE_MAGICAL})
        end
)
        if not projectile.unit:IsNull() then
            UTIL_Remove(projectile.unit)
        end
    end
}

    local projectile = Physics2D:CreateTrackingProjectile(projectileTable)

    projectile.projParticle=ParticleManager:CreateParticle("particles/units/heroes/hero_gyrocopter/gyro_homing_missile_fuse.vpcf",PATTACH_ABSORIGIN_FOLLOW,unit)
    ParticleManager:SetParticleControlEnt(projectile.projParticle,0,unit,PATTACH_POINT_FOLLOW,"attach_hitloc",unit:GetAbsOrigin(),true)
    ParticleManager:SetParticleControlEnt(projectile.projParticle,1,unit,PATTACH_POINT_FOLLOW,"attach_hitloc",unit:GetAbsOrigin(),true)
end
