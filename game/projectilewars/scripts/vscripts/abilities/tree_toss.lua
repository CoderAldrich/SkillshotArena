--=======================================================================================
-- Generated by TypescriptToLua transpiler https://github.com/Perryvw/TypescriptToLua 
-- Date: Tue Mar 13 2018
--=======================================================================================
require("typescript_lualib")
require("abilities/base_ability")
LinkLuaModifier("modifier_tree_toss_check","abilities/tree_toss.lua",LUA_MODIFIER_MOTION_NONE)
tree_toss = base_ability.new()
tree_toss.__index = tree_toss
tree_toss.__base = base_ability
function tree_toss.new(construct, ...)
    local instance = setmetatable({}, tree_toss)
    if construct and tree_toss.constructor then tree_toss.constructor(instance, ...) end
    return instance
end
function tree_toss.constructor(self)
    self.tree = nil
end
function tree_toss.GetIntrinsicModifierName(self)
    return "modifier_tree_toss_check"
end
function tree_toss.GetCastRange(self)
    if self:GetCaster():GetModifierStackCount("modifier_tree_toss_check",self:GetCaster())==0 then
        return 200
    else
        return self:GetSpecialValueFor("range")
    end
end
function tree_toss.GetAbilityTargetType(self)
    if self:GetCaster():GetModifierStackCount("modifier_tree_toss_check",self:GetCaster())==0 then
        return DOTA_UNIT_TARGET_TREE+DOTA_UNIT_TARGET_CUSTOM
    else
        return DOTA_UNIT_TARGET_NONE
    end
end
function tree_toss.GetBehavior(self)
    if self:GetCaster():GetModifierStackCount("modifier_tree_toss_check",self:GetCaster())==0 then
        return DOTA_ABILITY_BEHAVIOR_UNIT_TARGET
    else
        return DOTA_ABILITY_BEHAVIOR_POINT
    end
end
function tree_toss.CastFilterResultLocation(self)
    if self:GetCaster():GetModifierStackCount("modifier_tree_toss_check",self:GetCaster())==0 then
        return UF_FAIL_OTHER
    end
end
function tree_toss.CastFilterResultTarget(self,target)
    if target.IsNPC then
        return UF_FAIL_OTHER
    end
    if self:GetCaster():GetModifierStackCount("modifier_tree_toss_check",self:GetCaster())~=0 then
        return UF_FAIL_OTHER
    end
end
function tree_toss.GetProjectileParticleName(self)
    return "particles/abilities/tree_toss/tiny_tree_proj.vpcf"
end
function tree_toss.GetProjectileRange(self)
    if not self:GetCursorPosition() then
        return 0
    end
    local normal = self:GetCursorPosition()-self:GetCaster():GetAbsOrigin()

    return normal:Length2D()
end
function tree_toss.GetProjectileUnitBehavior(self)
    return PROJECTILES_IGNORE
end
function tree_toss.GetProjectileWallBehavior(self)
    return PROJECTILES_BOUNCE
end
function tree_toss.GetProjectileItemBehavior(self)
    return PROJECTILES_IGNORE
end
function tree_toss.GetProjectileTreeBehavior(self)
    return PROJECTILES_NOTHING
end
function tree_toss.OnSpellStart(self)
    local caster = self:GetCaster()

    if self:GetCaster():GetModifierStackCount("modifier_tree_toss_check",self:GetCaster())==0 then
        local tree = self:GetCursorTarget()

        caster:FindModifierByName("modifier_tree_toss_check"):SetStackCount(1)
        tree:CutDownRegrowAfter(9999,-1)
        self:EndCooldown()
    else
        self.tree=CreateTempTreeWithFuncs(caster:GetAbsOrigin())
        self.tree:AddEffects(EF_NODRAW)
        local projectileTable = {flRadius=self:GetSpecialValueFor("radius"),vDirection=(self:GetCursorPosition()-caster:GetAbsOrigin()):Normalized(),hCaster=caster,flSpeed=self:GetProjectileSpeed(),sEffectName=self:GetProjectileParticleName(),flMaxDistance=self:GetProjectileRange(),TreeBehavior=self:GetProjectileTreeBehavior(),UnitBehavior=self:GetProjectileUnitBehavior(),WallBehavior=self:GetProjectileWallBehavior(),ItemBehavior=self:GetProjectileItemBehavior(),UnitTest=function(projectile,unit,caster)
            if not unit.HasModifier then
                print(1)
                return false
            end
            if (unit:IsOutOfGame() or unit:IsInvulnerable()) or (unit:GetUnitName()=="npc_unit_dodgedummy") then
                print(2)
                return false
            else
                print(caster:GetTeamNumber()~=unit:GetTeamNumber())
                return caster:GetTeamNumber()~=unit:GetTeamNumber()
            end
        end
,OnUnitHit=function(projectile,unit,caster)
            ApplyDamage({victim=unit,attacker=caster,ability=self,damage=self:GetAbilityDamage(),damage_type=DAMAGE_TYPE_MAGICAL})
        end
,OnFinish=function(projectile)
            local loc = projectile.location

            local tree = self.tree

            tree:RemoveEffects(EF_NODRAW)
            tree:SetAbsOrigin(loc)
            ReplaceTreeWithTempTree(tree)
            FindClearSpaceForUnit(caster,caster:GetAbsOrigin(),true)
            self.tree=nil
        end
,OnProjectileThink=function(projectile,location)
            AddFOWViewer(projectile.caster:GetTeamNumber(),location+(projectile.direction*100),200,FrameTime()*2,false)
            local tree = self.tree

            tree:SetAbsOrigin(location)
            self.tree=ReplaceTreeWithTempTree(tree)
            self.tree:AddEffects(EF_NODRAW)
        end
}

        Physics2D:CreateLinearProjectile(projectileTable)
        caster:FindModifierByName("modifier_tree_toss_check"):SetStackCount(0)
        self:ConsumeCharge()
    end
end
modifier_tree_toss_check = {}
modifier_tree_toss_check.__index = modifier_tree_toss_check
function modifier_tree_toss_check.new(construct, ...)
    local instance = setmetatable({}, modifier_tree_toss_check)
    if construct and modifier_tree_toss_check.constructor then modifier_tree_toss_check.constructor(instance, ...) end
    return instance
end
function modifier_tree_toss_check.IsHidden(self)
    return true
end
function modifier_tree_toss_check.IsPermanent(self)
    return true
end
function modifier_tree_toss_check.OnCreated(self)
    if IsServer() then
        self.tree=SpawnEntityFromTableSynchronous("prop_dynamic",{model="models/heroes/tiny_01/tiny_01_tree.vmdl"})
        self.tree:FollowEntity(self:GetCaster(),self:GetCaster():GetUnitName()=="npc_dota_hero_tiny")
        self.tree:AddEffects(EF_NODRAW)
    end
end
function modifier_tree_toss_check.OnStackCountChanged(self)
    if IsServer() then
        if self:GetStackCount()==0 then
            self.tree:AddEffects(EF_NODRAW)
        else
            self.tree:RemoveEffects(EF_NODRAW)
        end
    end
end
